#!/bin/zsh

# Script to generate the sourcing block for .zshrc based on files in ~/.shellx

setopt errexit
setopt pipefail

local shellx_dir="${HOME}/.shellx"
local output_file="${shellx_dir}/generated_rc_sourcing.zsh"
temporary_file=$(mktemp) || exit 1

# Cleanup temporary file on exit
trap 'rm -f "$temporary_file"' EXIT INT TERM HUP

# --- Define the desired order for core files ---
# Files not listed here will be sourced alphabetically after these.
local preferred_order=(
  env_vars.zsh
  path.zsh
  nvm.zsh
  tools.zsh
  settings.zsh
  generated_completions.zsh
  functions.zsh
  aliases.zsh
  direnv.zsh
  antigen.zsh
  completions.zsh
  p10k_loader.zsh
  # Add other specific files here if needed, e.g.:
  # fzf.zsh
)

# --- Start writing the output file ---
echo "# --- Generated Zsh Sourcing Block ---" > "$temporary_file"
echo "# Automatically generated by $(basename "$0")" >> "$temporary_file"
echo "# Generated on: $(date)" >> "$temporary_file"
echo "" >> "$temporary_file"
echo "# Define shellx directory" >> "$temporary_file"
# Escape $HOME for the final output file
echo "_shellx_dir=\"\${HOME}/.shellx\"" >> "$temporary_file"
echo "" >> "$temporary_file"
echo "# Source files if they exist, in a specific order" >> "$temporary_file"

# --- Collect all .zsh files ---
# Use find for better handling of filenames and avoid issues with no matches
local all_files_full_path=()
# Use process substitution <(...) and null-terminated strings for safety
while IFS= read -r -d $'\0' file; do
    all_files_full_path+=("$file")
done < <(find "$shellx_dir" -maxdepth 1 -name '*.zsh' -print0)

local files_to_source=()
local processed_files=() # Keep track of files added to ensure order and avoid duplicates

# --- Handle Startup File ---
local startup_file="00_startup.zsh"
if [[ -f "${shellx_dir}/${startup_file}" ]]; then
  files_to_source+=("$startup_file")
  processed_files+=("$startup_file")
fi

# --- Handle Preferred Order Files ---
for pref_file in "${preferred_order[@]}"; do
  # Check if file exists and hasn't been processed (e.g. wasn't startup file)
  if [[ -f "${shellx_dir}/${pref_file}" ]] && ! [[ " ${processed_files[*]} " =~ " ${pref_file} " ]]; then
    files_to_source+=("$pref_file")
    processed_files+=("$pref_file")
  fi
done

# --- Handle Remaining Files (Alphabetical) ---
local remaining_files=()
for file_path in "${all_files_full_path[@]}"; do
  local file_name="${file_path##*/}"
  # Skip if already processed or is startup/shutdown or is the generated file itself
  if [[ "$file_name" != "00_startup.zsh" && \
        "$file_name" != "99_shutdown.zsh" && \
        "$file_name" != "generated_rc_sourcing.zsh" && \
        ! " ${processed_files[*]} " =~ " ${file_name} " ]]; then
    remaining_files+=("$file_name")
  fi
done
# Sort remaining files alphabetically (Zsh specific sort)
# The (on) flag sorts by name
if (( ${#remaining_files[@]} > 0 )); then
    files_to_source+=( ${(on)remaining_files} )
    processed_files+=( ${(on)remaining_files} ) # Add sorted remaining files to processed list
fi

# --- Handle Shutdown File ---
local shutdown_file="99_shutdown.zsh"
# Check if file exists and hasn't been processed
if [[ -f "${shellx_dir}/${shutdown_file}" ]] && ! [[ " ${processed_files[*]} " =~ " ${shutdown_file} " ]]; then
  files_to_source+=("$shutdown_file")
  # processed_files+=("$shutdown_file") # Not strictly needed if it's the absolute last
fi

# --- Write the sourcing lines ---
for file in "${files_to_source[@]}"; do
  # Add comment for clarity unless it's startup/shutdown
  local comment=""
  # if [[ "$file" != "00_startup.zsh" && "$file" != "99_shutdown.zsh" ]]; then
  #    comment=" # Load ${file%.zsh} config"
  # fi
  # Correctly escape for the final output file
  echo "[ -f \"\${_shellx_dir}/${file}\" ] && source \"\${_shellx_dir}/${file}\"${comment}" >> "$temporary_file"
done

# --- Add unset and finalize ---
echo "" >> "$temporary_file"
echo "# Clean up temporary variable" >> "$temporary_file"
echo "unset _shellx_dir" >> "$temporary_file"

# --- Compare and Move ---
if [[ -f "$output_file" ]] && diff -q "$temporary_file" "$output_file" &>/dev/null; then
  echo "Sourcing block in '$output_file' is already up-to-date." >&2
  rm "$temporary_file" # Clean up temp file
  exit 0
else
  echo "Generating/Updating sourcing block: '$output_file'" >&2
  mv "$temporary_file" "$output_file"
  # Temp file removed by move or trap
fi

echo "Sourcing block generation finished." >&2