#!/bin/zsh

# Script to generate Zsh completion definitions for aliases and functions
# defined in the ~/.shellx directory.

setopt errexit
setopt pipefail

local shellx_dir="${HOME}/.shellx"
local alias_file="${shellx_dir}/aliases.zsh"
local func_file="${shellx_dir}/functions.zsh"
local output_file="${shellx_dir}/generated_completions.zsh"
temporary_file=$(mktemp) || exit 1

# Cleanup temporary file on exit
trap 'rm -f "$temporary_file"' EXIT INT TERM HUP

# --- Header for generated file ---
echo "# --- Generated Zsh Completions ---" > "$temporary_file"
echo "# Automatically generated by generate_completions.sh" >> "$temporary_file"
echo "# Source Files: ${alias_file##*/}, ${func_file##*/}" >> "$temporary_file"
echo "# Generated on: $(date)" >> "$temporary_file"
echo "" >> "$temporary_file"

# --- Process Aliases ---
echo "# Completions for Aliases" >> "$temporary_file"
if [[ -f "$alias_file" ]]; then
    # Extract just the alias name and not the full definition
    grep -E '^[[:space:]]*alias[[:space:]]+[a-zA-Z0-9_-]+=' "$alias_file" | sed -E 's/^\s*alias\s+//' | cut -d'=' -f1 | while IFS= read -r alias_name; do
        # Map specific aliases to specific completions when known
        case "$alias_name" in
            pathx)
                echo "compdef _default alias $alias_name" >> "$temporary_file"
                ;;
            python)
                echo "compdef _python3 alias $alias_name" >> "$temporary_file"
                ;;
            grep)
                echo "compdef _grep alias $alias_name" >> "$temporary_file"
                ;;
            g|gs|gignore|gwip|grbi|grba|grbc|grbir)
                echo "compdef _git alias $alias_name" >> "$temporary_file"
                ;;
            l|la|ll)
                echo "compdef _ls alias $alias_name" >> "$temporary_file"
                ;;
            tarc|tarx)
                echo "compdef _tar alias $alias_name" >> "$temporary_file"
                ;;
            hidefiles|showfiles)
                echo "compdef _defaults alias $alias_name" >> "$temporary_file"
                ;;
            envc|gconf)
                echo "compdef _vim alias $alias_name" >> "$temporary_file"
                ;;
            mkdir)
                echo "compdef _mkdir alias $alias_name" >> "$temporary_file"
                ;;
            utime)
                echo "compdef _date alias $alias_name" >> "$temporary_file"
                ;;
            wrapoff|wrapon)
                echo "compdef _tput alias $alias_name" >> "$temporary_file"
                ;;
            tree)
                echo "compdef _tree alias $alias_name" >> "$temporary_file"
                ;;
            yts)
                echo "compdef _yt-dlp alias $alias_name" >> "$temporary_file"
                ;;
            venv)
                echo "compdef _default alias $alias_name" >> "$temporary_file"
                ;;
            *)
                echo "compdef _default alias $alias_name" >> "$temporary_file"
                ;;
        esac
    done
fi

# --- Process Functions ---
echo "" >> "$temporary_file"
echo "# Completions for Functions" >> "$temporary_file"
if [[ -f "$func_file" ]]; then
    # Extract function names (simple patterns: name() { or function name {)
    grep -E '^[a-zA-Z0-9_-]+\(\)\s*\{|^\s*function\s+[a-zA-Z0-9_-]+\s*\{' "$func_file" |
    sed -E 's/^\s*function\s+//; s/\(\)\s*\{//; s/\s*\{//' |
    while IFS= read -r func_name; do
        if [[ -n "$func_name" ]]; then
            # Remove trailing () if present (don't include parentheses in compdef)
            local clean_func_name=$(echo "$func_name" | sed 's/()$//')
            # Use _default completion for functions unless specific logic is added
            echo "compdef _default $clean_func_name" >> "$temporary_file"
        fi
    done
fi

# --- Finalize ---
# Check if the output file exists and if it's different from the new one
if [[ -f "$output_file" ]] && diff -q "$temporary_file" "$output_file" &>/dev/null; then
    echo "Completions in '$output_file' are already up-to-date." >&2
    # rm "$temporary_file" # Temp file removed by trap
    exit 0
else
    echo "Generating/Updating completions file: '$output_file'" >&2
    mv "$temporary_file" "$output_file"
    # Ensure temp file is removed via trap
fi

echo "Completion generation finished." >&2

